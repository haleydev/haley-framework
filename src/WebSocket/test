<?php
// Cria um servidor WebSocket na porta 8080
$server = stream_socket_server("tcp://0.0.0.0:8080", $errno, $errstr);

if (!$server) {
    echo "Erro ao iniciar o servidor: $errstr ($errno)\n";
    exit(1);
}

echo "Servidor WebSocket iniciado na porta 8080\n";

// Loop principal do servidor
while ($client = stream_socket_accept($server)) {
    // Lê a requisição de handshake do cliente
    $request = fread($client, 4096);
    // Responde com o handshake
    $response = "HTTP/1.1 101 Switching Protocols\r\n" .
                "Upgrade: websocket\r\n" .
                "Connection: Upgrade\r\n" .
                "Sec-WebSocket-Accept: " . base64_encode(sha1(substr($request, strpos($request, "Sec-WebSocket-Key") + 19, 24) . "258EAFA5-E914-47DA-95CA-C5AB0DC85B11", true)) . "\r\n\r\n";
    fwrite($client, $response);

    // Loop para receber e enviar dados
    while ($buffer = fread($client, 4096)) {
        // Decodifica o payload WebSocket
        $payload = decodeWebSocketPayload($buffer);
        // Trata os dados recebidos, por exemplo, salvando em um arquivo
        file_put_contents('data.blob', $payload, FILE_APPEND);

        // Aqui você pode processar os dados recebidos ou enviar dados de volta para o cliente
        // Para enviar dados de volta, você pode usar a função encodeWebSocketPayload()
        // fwrite($client, encodeWebSocketPayload("Resposta do servidor"));
    }

    fclose($client);
}

fclose($server);

// Função para decodificar o payload do WebSocket
function decodeWebSocketPayload($buffer) {
    $length = ord($buffer[1]) & 127;
    $data = '';
    if ($length === 126) {
        $masks = substr($buffer, 4, 4);
        $data = substr($buffer, 8);
    } elseif ($length === 127) {
        $masks = substr($buffer, 10, 4);
        $data = substr($buffer, 14);
    } else {
        $masks = substr($buffer, 2, 4);
        $data = substr($buffer, 6);
    }

    $payload = '';
    for ($i = 0; $i < strlen($data); ++$i) {
        $payload .= $data[$i] ^ $masks[$i % 4];
    }

    return $payload;
}

// Função para codificar o payload do WebSocket
function encodeWebSocketPayload($payload) {
    $length = strlen($payload);
    $header = chr(0x81);
    if ($length <= 125) {
        $header .= chr($length);
    } elseif ($length <= 65535) {
        $header .= chr(126) . pack("n", $length);
    } else {
        $header .= chr(127) . pack("NN", 0, $length);
    }
    return $header . $payload;
}
